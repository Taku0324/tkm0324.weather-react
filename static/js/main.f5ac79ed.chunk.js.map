{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","id","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAEMA,EACC,mCADDA,EAEC,2CA0EQC,MAvEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA0BA,OACE,qBAAKC,UAAiC,oBAAdF,EAAQG,GAC5BH,EAAQA,QAAQ,GAAGG,GAAK,GAAKH,EAAQA,QAAQ,GAAGG,GAAK,IAAO,YAC7DH,EAAQA,QAAQ,GAAGG,GAAK,KAAOH,EAAQA,QAAQ,GAAGG,GAAK,IAAM,mBAC7DH,EAAQA,QAAQ,GAAGG,GAAK,KAAOH,EAAQA,QAAQ,GAAGG,GAAK,IAAM,cAC7DH,EAAQA,QAAQ,GAAGG,GAAK,KAAOH,EAAQA,QAAQ,GAAGG,GAAK,IAAM,WAC7DH,EAAQA,QAAQ,GAAGG,GAAK,KAAOH,EAAQA,QAAQ,GAAGG,GAAK,IAAM,WAC7DH,EAAQA,QAAQ,GAAGG,GAAK,KAAOH,EAAQA,QAAQ,GAAGG,GAAK,IAAM,iBACpC,KAAzBH,EAAQA,QAAQ,GAAGG,GAAY,YAC/BH,EAAQA,QAAQ,GAAGG,GAAK,KAAOH,EAAQA,QAAQ,GAAGG,GAAK,IAAM,aAC9D,MAAS,MATX,SAUE,iCACE,qBAAKD,UAAU,aAAf,SACE,uBACEE,KAAK,OACLF,UAAU,aACVG,YAAY,iBACZC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WA3CK,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,iCAAuDH,IACzDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,WAuCW,oBAAhBjB,EAAQoB,KACjB,gCACE,sBAAKlB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SAtCS,SAACsB,GAClB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA6BHE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACCiC,KAAKC,MAAMpC,EAAQoB,KAAKiB,MADzB,WAGA,qBAAKnC,UAAU,UAAf,SACCF,EAAQA,QAAQ,GAAGoB,aAInB,SC5DEkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f5ac79ed.chunk.js","sourcesContent":["import { result } from 'lodash';\nimport { useState } from 'react';\nconst api = {\n  key: \"18d2dc8e7fcc16835f96c1080e6497a2\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n    });\n  }\n}\n\n  const dateBuilder =(d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.id != \"undefined\") ?\n    　 ((weather.weather[0].id > 0 && weather.weather[0].id < 200) ? 'app sunny' :\n      (weather.weather[0].id > 199 && weather.weather[0].id < 300) ?'app thunderstorm':\n      (weather.weather[0].id > 299 && weather.weather[0].id < 400) ?'app drizzle':\n      (weather.weather[0].id > 499 && weather.weather[0].id < 600) ?'app rain':\n      (weather.weather[0].id > 599 && weather.weather[0].id < 700) ?'app snow':\n      (weather.weather[0].id > 699 && weather.weather[0].id < 800) ?'app atmosphere':\n      (weather.weather[0].id == 800) ?'app clear':\n      (weather.weather[0].id > 800 && weather.weather[0].id < 900) ?'app clouds':\n      'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search city...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n            {Math.round(weather.main.temp)}°F\n            </div>\n            <div className=\"weather\">\n            {weather.weather[0].main}\n            </div>\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}